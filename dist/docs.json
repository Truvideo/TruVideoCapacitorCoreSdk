{
  "api": {
    "name": "AuthenticationPlugin",
    "slug": "authenticationplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "echo",
        "signature": "(options: { value: string; }) => Promise<{ value: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<{ value: string; }>",
        "tags": [],
        "docs": "Echo test method.",
        "complexTypes": [],
        "slug": "echo"
      },
      {
        "name": "isAuthenticated",
        "signature": "() => Promise<{ isAuthenticated: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ isAuthenticated: boolean; }>",
        "tags": [],
        "docs": "Checks if the user is authenticated.",
        "complexTypes": [],
        "slug": "isauthenticated"
      },
      {
        "name": "isAuthenticationExpired",
        "signature": "() => Promise<{ isAuthenticationExpired: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ isAuthenticationExpired: boolean; }>",
        "tags": [],
        "docs": "Checks if the authentication has expired.",
        "complexTypes": [],
        "slug": "isauthenticationexpired"
      },
      {
        "name": "generatePayload",
        "signature": "() => Promise<{ generatePayload: string; }>",
        "parameters": [],
        "returns": "Promise<{ generatePayload: string; }>",
        "tags": [],
        "docs": "Generates the payload used for authentication.",
        "complexTypes": [],
        "slug": "generatepayload"
      },
      {
        "name": "authenticate",
        "signature": "(options: { apiKey: string; payload: string; signature: string; externalId: string; }) => Promise<{ authenticate: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ apiKey: string; payload: string; signature: string; externalId: string; }"
          }
        ],
        "returns": "Promise<{ authenticate: string; }>",
        "tags": [],
        "docs": "Performs authentication using the provided parameters.",
        "complexTypes": [],
        "slug": "authenticate"
      },
      {
        "name": "initAuthentication",
        "signature": "() => Promise<{ initAuthentication: string; }>",
        "parameters": [],
        "returns": "Promise<{ initAuthentication: string; }>",
        "tags": [],
        "docs": "Initializes the authentication system.",
        "complexTypes": [],
        "slug": "initauthentication"
      },
      {
        "name": "clearAuthentication",
        "signature": "() => Promise<{ clearAuthentication: string; }>",
        "parameters": [],
        "returns": "Promise<{ clearAuthentication: string; }>",
        "tags": [],
        "docs": "Clears the authentication session.",
        "complexTypes": [],
        "slug": "clearauthentication"
      },
      {
        "name": "toSha256String",
        "signature": "(options: { secretKey: string; payload: string; }) => Promise<{ signature: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ secretKey: string; payload: string; }"
          }
        ],
        "returns": "Promise<{ signature: string; }>",
        "tags": [],
        "docs": "Converts a payload to a SHA256 HMAC signature using a secret key.",
        "complexTypes": [],
        "slug": "tosha256string"
      }
    ],
    "properties": []
  },
  "interfaces": [],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": []
}